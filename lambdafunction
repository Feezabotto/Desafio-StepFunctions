## Código lambda para o start do ECS e validação do status:
          import json
          import boto3
          import os

          def lambda_handler(event, context):
    # Extrair os parâmetros do evento
    cluster_arn = os.environ['ECS_CLUSTER_ARN']
    task_definition_arn = os.environ['ECS_TASK_DEFINITION_ARN']
    subnet_az1 = os.environ['SUBNET_AZ1']
    subnet_az2 = os.environ['SUBNET_AZ2']
    sns_topic_arn = os.environ['SNS_TOPIC_ARN']
    
    # Inicializar o cliente ECS
    ecs_client = boto3.client('ecs')

    try:
        # Executar a tarefa Fargate
        response = ecs_client.run_task(
            launchType='FARGATE',
            cluster=cluster_arn,
            taskDefinition=task_definition_arn,
            networkConfiguration={
                'awsvpcConfiguration': {
                    'subnets': [subnet_az1, subnet_az2],
                    'assignPublicIp': 'ENABLED'
                }
            }
        )
        
        # Verificar se a tarefa foi iniciada com sucesso
        if response['failures']:
            raise Exception("Failed to run task: {}".format(response['failures']))
        else:
            message = "AWS Fargate Task started successfully."
            notify_sns(sns_topic_arn, message)

    except Exception as e:
        # Em caso de falha, notificar o SNS
        message = "AWS Fargate Task failed: {}".format(str(e))
        notify_sns(sns_topic_arn, message)
        return {
            'statusCode': 500,
            'body': json.dumps('Error: {}'.format(str(e)))
        }

    return {
        'statusCode': 200,
        'body': json.dumps('Fargate Task started successfully')
    }

          def notify_sns(topic_arn, message):
    # Inicializar o cliente SNS
    sns_client = boto3.client('sns')
    
    # Publicar a mensagem no SNS
    sns_client.publish(
        TopicArn=topic_arn,
        Message=message
    )

